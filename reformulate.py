from langchain_community.llms import Ollama
import re

def reformulate(text:str) -> str:
    """Use LLM to split a text into reformulated sentennces

    Args:

        text (str) : text to simplify

    Returns:
        (str) : answer from the LLM
    
    """


    llm = Ollama(model="llama3:70b")
    
    # stage 1
    prompt = f"""

    [INSTRUCTION] : Parse the following text into atomic statements that capture all the relationships described. The output should be a list of very simple sentences, where each sentence describes only one relationship. return results as a list   
    [TEXTE] : {text}

    [OUTPUT]: 
    """
    answer = llm.invoke(prompt)

    print(answer)
    print("-"*42)

    return answer




def load_output_from_log():
    """read log file, for dev purpose"""

    text_list = []
    text = ""
    log_data = open('llm_llama3_70b.log', 'r')
    for line in log_data:
        if not re.search('^-----', line):
            text += line
        else:
            text_list.append(text)
            text = ""

    return text_list
            


def parse_llm_output(llm_output:str) -> list:
    """Read llm output and extract a list of reforulated sentence

    Args:
        llm_output (str) : text generated by the llm

    Returns:
        (list) : list of sentences parsed from text
    
    """

    sentence_list = []
    for line in llm_output.split("\n"):
        if re.search('^\*', line):
            sentence = line[2:-1]
            sentence_list.append(sentence)
        elif re.search('^[0-9]{1,}\.', line):
            i = re.findall('^[0-9]{1,}\. ', line)[0]
            sentence = line.replace(i, '')
            sentence_list.append(sentence)
    
    return sentence_list




def clean_sentence(sentence:str) -> str:
    """Clean sentence, try to simplify it for further parsing

    Args:
        sentence (str) : the sentence to clean*

    Returns:
        (str) : answer of the llm


    Dev Notes:

        - example input:
             
            * Fever is a symptom of the disease.
            * The disease relies on the activation of B1 factor.
            * The activation of B1 factor is caused by F22.
            * The activation of B1 factor is caused by F35.

        - targeted output:

            'B1 depend on F35',
            'B1 depend on F22',
            'Fever is induced by B1'
    """

    llm = Ollama(model="llama3:70b")
    
    # stage 1
    prompt = f"""

    [INSTRUCTION] : Reformulate the following sentence using by simplifying it and use only the words 'depends', 'induce', 'involve' to describe relations between elements.
    [SENTENCE] : {sentence}

    [OUTPUT]: 
    """
    answer = llm.invoke(prompt)

    print(answer)
    print("-"*42)

    return answer
    




if __name__ == "__main__":

    text = """Fever is a main symptoms of the disease, it rely on the activation of B1 factor. F22 and F35 are responsible for the activation of B1."""

    # log_file = open("llm_llama3_70b.log", 'w')
    # for x in range(10):
    #     llm_output = reformulate(text)
    #     log_file.write(f"{llm_output}\n")
    #     log_file.write(f"---------------------------------\n")
    # log_file.close()

    # sentence_list = parse_llm_output()

    text_list = load_output_from_log()
    for text in text_list:
        sentence_list = parse_llm_output(text)
        for s in sentence_list:
            print(s)
            clean_sentence(s)

